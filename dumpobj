#!/usr/bin/python3
#+
# This script dumps out RSTS/E/RT-11/RSX .OBJ files.
#
# Written by Lawrence D'Oliveiro <ldo@geek-central.gen.nz>.
#-

import sys
import os
import struct
import getopt
from crosscode11 import \
    unrad50

class FBFile :
    "reads a file with records in formatted-binary."

    def __init__(self, filename) :
        self.infile = open(filename, "rb")
    #end __init__

    def readrec(self) :
        "reads the next record and returns its contents, returning None if" \
        " the end of the file has been reached."
        while True :
            b = self.infile.read(1)
            if len(b) == 0 :
                b = None
                break
            #end if
            if ord(b) != 0 :
                break
        #end while
        if b != None :
            assert ord(b) == 1, "bad formatted-binary start marker"
            b = self.infile.read(3)
            assert len(b) == 3, "truncated formatted-binary header"
            assert b[0] == 0, "bad formatted-binary marker pad"
            reclen = b[1] | b[2] << 8
            assert reclen >= 4, "formatted-binary record length too short"
            data = self.infile.read(reclen - 3) # including checksum byte
            assert len(data) == reclen - 3, "truncated formatted-binary record"
            assert sum(b for b in bytes((1, 0)) + b[1:] + data) & 255 == 0, \
                "bad formatted-binary record checksum"
            result = data[:-1] # drop checksum byte
        else :
            # EOF
            result = None
        #end if
        return \
            result
    #end readrec

#end FBFile

gsd_entry_types = \
    {
        0 : "Module Name",
        1 : "Control Section Name",
        2 : "Internal Symbol Name",
        3 : "Transfer Address",
        4 : "Global Symbol Name",
        5 : "PSECT Name",
        6 : "Program Version",
        7 : "Mapped Array Decl",
    }

gsd_global_sym_flags = \
    {
        0 : ("strong", "weak"),
        3 : ("ref", "def"),
        5 : ("abs", "rel"),
    }

gsd_psect_name_flags = \
    {
        0 : ("local/global", "root"),
        2 : ("con", "ovr"),
        4 : ("r/w", "ro"),
        5 : ("abs", "rel"),
        6 : ("local", "global"),
        7 : ("instr", "data"),
    }

def decode_flags(flags, names) :
    decode = []
    for i in range(8) :
        if i in names :
            decode.append(names[i][1 << i & flags != 0])
        elif 1 << i & flags != 0 :
            decode.append("?%d" % i)
        #end if
    #end for
    return \
        ", ".join(decode)
#end decode_flags

class RLDDecoder :
    "decode function must always return a string."

    def __init__(self, name, size, decode) :
        self.name = name
        self.size = size
        self.decode = decode
    #end __init__

#end RLDDecoder
rld_decode_name = RLDDecoder("name", 4, lambda b : "“%s”" % unrad50(struct.unpack("<HH", b)).decode())
rld_decode_constant = RLDDecoder("const", 2, lambda b : "%#0.6o" % struct.unpack("<H", b)[0])

name = (rld_decode_name,)
const = (rld_decode_constant,)
name_and_const = (rld_decode_name, rld_decode_constant)
rld_entry_types = \
    {
        1 : {"name" : "internal", "decode" : const},
        2 : {"name" : "global", "decode" : name},
        3 : {"name" : "internal displaced", "decode" : const},
        4 : {"name" : "global displaced", "decode" : name},
        5 : {"name" : "global additive", "decode" : name_and_const},
        6 : {"name" : "global additive displaced", "decode" : name_and_const},
        7 : {"name" : "location counter def", "decode" : name_and_const},
        8 : {"name" : "location counter modify", "decode" : const},
        9 : {"name" : "program limits", "decode" : ()},
        10 : {"name" : "psect", "decode" : name},
        # 11 -- not used
        12 : {"name" : "psect displaced", "decode" : name},
        13 : {"name" : "psect additive", "decode" : name_and_const},
        14 : {"name" : "psect additive displaced", "decode" : name_and_const},
        15 : {"name" : "complex", "decode" : None}, # special case
    }

psects_by_index = []
def decode_section(b) :
    section_index = struct.unpack("<B", b)[0]
    if section_index >= 1 and section_index <= len(psects_by_index) :
        section_name = "“%s”" % psects_by_index[section_index - 1]
    else :
        section_name = "?"
    #end if
    return \
        "%d (%s)" % (section_index, section_name)
#end decode_section

rld_decode_section = RLDDecoder("section", 1, decode_section)
rld_decode_offset = RLDDecoder("offset", 2, lambda b : "%#0.6o" % struct.unpack("<H", b)[0])
rld_complex_ops = \
    {
        0 : {"name" : "nop"},
        1 : {"name" : "add"},
        2 : {"name" : "sub"},
        3 : {"name" : "mul"},
        4 : {"name" : "div"},
        5 : {"name" : "and"},
        6 : {"name" : "or"},
        7 : {"name" : "xor"},
        8 : {"name" : "neg"},
        9 : {"name" : "not"},
        10 : {"name" : "store", "stop" : True},
        11 : {"name" : "store displaced", "stop" : True},
        14 : {"name" : "fetch global", "operands" : name},
        15 : {"name" : "fetch relocatable value", "operands" : (rld_decode_section, rld_decode_offset)},
        16 : {"name" : "fetch const", "operands" : const},
    }
del name, const, name_and_const

#+
# Mainline
#-

debug = False
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    ["debug"]
  )
for keyword, value in opts :
    if keyword == "--debug" :
        debug = True
    #end if
#end for
if len(args) != 1 :
    raise getopt.GetoptError("need exactly one arg, the name of the .OBJ file to dump")
#end if

infile = FBFile(args[0])
while True :
    rec = infile.readrec()
    if rec == None :
        break
    if debug :
        sys.stdout.write("[%d] %s\n" % (len(rec), repr(rec)))
    #end if
    rectype = rec[0]
    sys.stdout.write("rectype %d " % rectype)
    if rectype == 1 :
        sys.stdout.write("GSD\n")
        offset = 2
        while True :
            if offset + 8 > len(rec) :
                if offset < len(rec) :
                    sys.stdout.write(" incomplete entry (%d remaining)\n" % (len(rec) - offset))
                #end if
                break
            #end if
            entry = rec[offset : offset + 8]
            offset += 8
            name = unrad50(struct.unpack("<HH", entry[:4])).decode()
            flags = entry[4]
            entrytype = entry[5]
            value, = struct.unpack("<H", entry[6:])
            sys.stdout.write \
              (
                  "entry type %(type)d (%(typename)s), flags %(flags)#0.2x (%(flags_decode)s), name “%(name)s”, value %(value)#0.6o\n"
                %
                    {
                        "type" : entrytype,
                        "typename" : gsd_entry_types.get(entrytype, "?"),
                        "flags" : flags,
                        "flags_decode" :
                            decode_flags
                              (
                                flags,
                                {4 : gsd_global_sym_flags, 5 : gsd_psect_name_flags}
                                    .get(entrytype, {})
                              ),
                        "name" : name,
                        "value" : value,
                    }
              )
            if entrytype == 5 :
                psects_by_index.append(name)
            #end if
        #end while
    elif rectype == 2 :
        sys.stdout.write("ENDGSD\n")
    elif rectype == 3:
        sys.stdout.write("TXT\n")
        if len(rec) >= 4 :
            sys.stdout.write(" load addr %#0.6o, len %#0.6o\n" % (struct.unpack("<H", rec[2:4])[0], len(rec) - 4))
        #end if
    elif rectype == 4 :
        sys.stdout.write("RLD\n")
        offset = 2
        while True :
            if offset + 2 > len(rec) :
                if offset < len(rec) :
                    sys.stdout.write(" incomplete entry (%d remaining)\n" % (len(rec) - offset))
                #end if
                break
            #end if
            command = rec[offset]
            byteflag = command & 128 != 0
            command &= 127
            disp = rec[offset + 1]
              # Note that this is 4 greater than actual offset into preceding TXT
              # data.
            if command in rld_entry_types :
                offset += 2
                rld_entry = rld_entry_types[command]
                sys.stdout.write \
                  (
                        " %d %s (%s) at %d: "
                    %
                        (command, rld_entry["name"], ("word", "byte")[byteflag], disp)
                  )
                if rld_entry["decode"] != None :
                    entry_size = sum(e.size for e in rld_entry["decode"])
                    if offset + entry_size > len(rec) :
                        raise IndexError \
                          (
                                "truncated RLD entry type %d at offset %d (need %d bytes, only %d remaining)"
                            %
                                (command, offset, entry_size, len(rec) - offset)
                          )
                    #end if
                    first = True
                    for e in rld_entry["decode"] :
                        if not first :
                            sys.stdout.write(", ")
                        #end if
                        sys.stdout.write(" %s: %s" % (e.name, e.decode(rec[offset : offset + e.size])))
                        offset += e.size
                        first = False
                    #end for
                else :
                    first = True
                    while True :
                        if offset == len(rec) :
                            raise IndexError("unterminated complex relocation at offset %d" % offset)
                        #end if
                        op = rec[offset]
                        if op not in rld_complex_ops :
                            raise KeyError("unrecognized complex op %d at offset %d" % (op, offset))
                        #end if
                        offset += 1
                        rld_entry = rld_complex_ops[op]
                        entry_size = sum(e.size for e in rld_entry.get("operands", ()))
                        if offset + entry_size > len(rec) :
                            raise IndexError \
                              (
                                    "truncated RLD complex entry op %d at offset %d (need %d bytes, only %d remaining)"
                                %
                                    (op, offset, entry_size, len(rec) - offset)
                              )
                        #end if
                        if not first :
                            sys.stdout.write(", ")
                        #end if
                        sys.stdout.write("%d %s" % (op, rld_entry["name"]))
                        if entry_size != 0 :
                            sys.stdout.write("(")
                            first = True
                            for e in rld_entry["operands"] :
                                if not first :
                                    sys.stdout.write(", ")
                                #end if
                                sys.stdout.write("%s: %s" % (e.name, e.decode(rec[offset : offset + e.size])))
                                offset += e.size
                                first = False
                            #end for
                            sys.stdout.write(")")
                        #end if
                        if rld_entry.get("stop", False) :
                            sys.stdout.write(".")
                            break
                        #end if
                        first = False
                    #end while
                #end if
                sys.stdout.write("\n")
            else :
                raise KeyError("unrecognized RLD entry type %d at offset %d" % (command, offset))
            #end if
        #end while
    elif rectype == 5 :
        sys.stdout.write("ISD\n")
        # further details unspecified
    elif rectype == 6 :
        sys.stdout.write("ENDMOD\n")
    elif rectype == 7 :
        sys.stdout.write("lib header\n")
    else :
        sys.stdout.write("?")
    #end if
#end while
