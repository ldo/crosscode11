crosscode11 -- cross-generation of PDP-11 machine code from Python
==================================================================

.. This documentation file is perfectly readable as is. Or you can process it
   through Docutils <http://docutils.sourceforge.net/> to generate an HTML page,
   or whatever.

**crosscode11** is like a cross-assembler for the PDP-11\ [1]_. Only,
instead of conventional assembler syntax, the program is written
as a Python 3 script. This script will contain calls to generate the
machine code, and to output it in some form, for example to execute
on the SIMH\ [2]_ emulator. Having the full power of Python available
allows for more powerful code-generation possibilities, beyond those
of conventional macro assemblers.

The ``crosscode11`` module contains 3 main classes: **o**, **op** and **CodeBuffer**.
You create an instance of the ``CodeBuffer`` class as a place to hold the generated
code. This class has methods that allow you to insert memory contents at any
desired location, and define and reference symbolic labels to avoid having
dealing with explicit address allocations. E.g.::

    c = CodeBuffer()
    l = c.label("here") # declare a label called "here", initially unresolved
    c.org(0o200) # set starting location for inserting memory contents
    l.resolve() # resolve label "here" to current location, 200 octal

The ``op`` class contains definitions of all the available PDP-11 instruction
mnemonics. These objects may be passed as the first argument of the **i**
method in a ``CodeBuffer`` object, along with any necessary instruction operands,
to insert the generated instruction into the code buffer. E.g. (continuing
the previous example)::

    c.i(op.NOP) # insert a NOP instruction at the current location

The ``o`` class contains objects that may be used to construct instruction
operands. Most of these specify a register name, with additional characters
prepended or appended as appropriate to denote an addressing mode (\ *n* âˆŠ 0 .. 7):

    +-----------------------+-----------------------+----------------------------------+
    | Python                | DEC                   | Description                      |
    | syntax                | assembler             |                                  |
    |                       | notation              |                                  |
    +-----------------------+-----------------------+----------------------------------+
    | o.R\ *n*              | R\ *n*                | register direct                  |
    +-----------------------+-----------------------+----------------------------------+
    | o.aR\ *n*             | (R\ *n*\ )            | register deferred                |
    +-----------------------+-----------------------+----------------------------------+
    | o.R\ *n*\ i           | (R\ *n*\ )+           | register post-increment          |
    +-----------------------+-----------------------+----------------------------------+
    | o.aR\ *n*\ i          | @(R\ *n*\ )+          | register post-increment deferred |
    +-----------------------+-----------------------+----------------------------------+
    | o.pR\ *n*             | -(R\ *n*\ )           | register pre-decrement           |
    +-----------------------+-----------------------+----------------------------------+
    | o.apR\ *n*            | @-(R\ *n*\ )          | register pre-decrement deferred  |
    +-----------------------+-----------------------+----------------------------------+
    | o.R\ *n*\ o + *offs*  | *offs*\ (R\ *n*\ )    | register + offset                |
    +-----------------------+-----------------------+----------------------------------+
    | o.aR\ *n*\ o + *offs* | @\ *offs*\ (R\ *n*\ ) | register + offset deferred       |
    +-----------------------+-----------------------+----------------------------------+
    | o.i + *val*           | #\ *val*              | immediate operand                |
    +-----------------------+-----------------------+----------------------------------+
    | o.a + *addr*          | @#\ *addr*            | absolute address                 |
    +-----------------------+-----------------------+----------------------------------+

As usual, the name ``SP`` (stack pointer) may be used as a synonym for ``R6``\ ,
and ``PC`` (program counter) for ``R7``\ . In the last two entries, *val* and *addr*
may be labels as well as integers. If an instruction operand is not one of the above but is
a simple label or integer, it is treated as a relative address.

For example, the following assembly-language sequence::

            MOV     0100(R3), R0
    again:  MOVB    (R0)+, (R1)+
            BNE     again

could be generated as::

    c.i(op.MOV, o.R3o + 0o100, o.R0)
    c.label("again").resolve()
    c.i(op.MOVB, o.R0i, o.R1i)
    c.i(op.BNE, c.label("again"))

Program Sections (PSECTs)
-------------------------

A program can be separated into sections. As one usage case, it is a good idea
to keep code and data separate by putting each into its own PSECT. Each PSECT
is assigned its own starting location, and ``crosscode11`` will check to ensure
that PSECTs do not run into one another.

For example, the following code might output a null-terminated string to
a terminal device, given a routine called ``ttyout`` (defined elsewhere) which
outputs a single character passed to it in R0::

    c.psect("main")
    c.org(0o200)
    c.i(op.MOV, o.i + c.label("thestr"), o.R4)
    c.label("outnext").resolve()
    c.label("done")
    c.i(op.MOV, o.R4i, o.R0)
    c.i(op.BEQ, c.label("done"))
    c.i(op.JSR, o.PC, c.label("ttyout"))
    c.i(op.BR, c.label("outnext"))
    c.label("done").resolve()

The string to be output is pointed to by the label ``thestr``, which
could be defined in another PSECT::

    c.psect("data")
    c.org(0o1000)
    c.label("thestr").resolve()
    for ch in "hi there!\015\012" :
        c.b(ord(ch))
    #end for
    c.b(0)

Additional Functions
--------------------

*codebuffer*\ **.start(**\ *location*\ **)**
    defines the address at which to start program execution. This is used
    by ``dump_simh`` (below) to generate a SIMH command to transfer control
    to that address after depositing the program into memory.

**gen_pt_boot(**\ *codebuffer*\ , *memsize*\ , *devaddr*\ **)**
    This generates the paper-tape bootstrap loader code into *codebuffer*
    at the appropriate absolute address. *memsize* is the memory size in
    integer kiB [8 .. 56], and *devaddr* is the device status register address
    of the paper-tape reader: 0o177560 for the teletype, 0o177550 for the
    high-speed reader.

**dump_simh(**\ *codebuffer*\ , *output*\ **)**
    This writes out the contents of the specified *codebuffer* to the specified
    *output* stream in the form of SIMH commands to deposit the code into
    the emulated machine memory.

.. [1] The PDP-11 was a family of 16-bit minicomputers manufactured
   by Digital Equipment Corporation from the late 1960s onwards.
   For more information, check out sites like `pdp11.org <http://www.pdp11.org/>`_
   and `bitsavers.org <http://bitsavers.org/>`_.
.. [2] `SIMH <http://simh.trailing-edge.com/>`_ is a collection of high-fidelity
   software emulators for various classic computer architectures, including the PDP-11.
